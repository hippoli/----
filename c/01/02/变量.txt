1、变量
    变量指程序运行时，可以改变其值的数据对象，类似于购物时所用的那个购物蓝。
    定义变量时，会在内存中开辟一块内存空间，且这块存储空间是可以写的。

    定义变量:
        变量的类型 变量名;
        变量的类型 变量名 = 初值;

    例： 
        int i;  // 请求计算机分配4个字节的内存空间，用来存储整数，通过名字i就能操作这块空间
        int j = 10; // 要求计算机分配4个字节的空间，同时把整数10存储到这块空间中

    变量名说明：
        变量名只能包括数字、字母、下划线，且不能以数字开头
        不能用关键字和类型名做为变量名
        变量名是区分大小写的
            例： 
                int _i; int i2; int i_3; // OK
                int 3i; // 错误，变量名不能以数字开头
                int a; int A; // 这是两个不同的变量
        
        起名要见知其义，但是有一些常见的情况下，会用到一些简单的字母做为变量名
            i,j,k,m,n
            x,y
            w,h 
            r,g,b

        如果变量名较长，建议用下划线连接多个单词，如：
            char* student_name;  

    变量的属性：
        变量的类型 
        变量名 
        变量的地址

        在程序运行时，系统会给每一个变量分配一个存储空间，用来保存变量的值，并且为这块空间分配一个唯一的编号，这个编号，一般称为内存地址。

    变量的访问：
        对于变量的访问，要么读它的值，要么修改它的值
        读：
            从变量的存储空间中读取存储空间中的内容，称为读取变量的值
        写： 
            把一个数据写到变量所对应的存储空间中去，称为赋值。
        例： 
            int i;
            i = 1; // 给变量i赋值，此处的i表示变量的地址
            printf("i = %d \n", i); // 此处的i,表示变量的值

        变量名有两层含义：
        1、代表变量的地址
            lvalue
                left value          左值
                location value      可寻址的值 
            所有的变量，都是lvalue
        2、代表变量的值
            rvalue 
                right value         右值
                readonly value      只读的值，如1， 2，3
                例：    1 = 10; 错误的表达式，1是一个右值，不能出现在等于号的左边


2、整数的存储
    整数在计算机中是以二进制的补码形式存储的
    正数：
        正数的补码就是它的原码(原码是指一个正数直接转换成二进制的那个形式)


    负数：
        负数的补码 是它的绝对值的原码 取反 +1 得到的结果
    
    例：假设是8bits的数据
        -10 => |-10|  => 10 => 0000 1010 => 1111 0110 
        => 1*2^7 + 1*2^6 + 1*2^5 + 1*2^4 + 0 + 1*2^2 + 1*2^1 + 0 
        => 128 + 64 + 32 + 16 + 0 + 4 + 2 + 0
        => 246

    unsigned char 8 bit:   [0, 255]
    0000 0000 = 0
    1111 1111  => 
        1*2^7 + 1*2^6 + 1*2^5 + 1*2^4 + 1*2^3 + 1*2^2 + 1*2^1 + 1*2^0
        128 + 64 + 32 + 16 + 8 + 4 + 2 + 1
        128+64+63
        128+127
        255


    练习： 
        signed char 它的取值范围是多少？ [-128, 127]
        0 000 0000   -  0 111 1111
        1 000 0000   -  1 111 1111
        1 000 0000 - 1 = 0 111 1111 => 1 000 0000 => |x| = 128 => x = -128
            


        假设计算机用8bit来存储一个整数，已知某个整数在计算机中存储形式如下：
        1111 1110
        请问这个数是多少？
            254
        1111 1110 => 1111 1101 => 0000 0010 => |x| = 2 => x = -2  

        

    结论：
        CPU内部是没有符号位的概念的，只是负责存储数据，至于数据怎么解释，那是编译器的问题
        一个负数会和一个比较大的正数的补码形式相同。
        -2   254
        2^8 - 2 = 254
        2^8 - 3 = 253

        
        0000 0000 0000 0000  => 0
        1111 1111 1111 1111  => 65535 = > 2^16-1



3、浮点数的存储
    float 的存储方式：
        1bit(符号位) + 8bits(指数位) + 23bits(尾数位)
    double 的存储方式：
        1bit(符号位) + 11bits(指数位) + 52bits(尾数位)

    314.0
        => 3.14 * 10^2
        => 3.14E2 = > 2就是指数，可正可负， 3.14就是尾数， 由于这是一个正数，符号为0




4、整数之间的赋值问题
    在C语言中，允许不同类型的整数之间相互赋值
    char -> int 
    short -> int
    int -> long 
    int -> char 
    ...
    那不同类型的整数，存储空间大小不一样，怎么赋值的？
    1、长 -> 短
        长的赋值给短的，低字节直接拷贝，高字节全部丢弃
        例： 
            int a = 0x12345678;
            char c = a; // 在x86的系统中，0x78

    2、短 -> 长 
        短的赋值给长的，低字节直接拷贝，高字节自动填充：
            如果短的值是有符号的，则高字节自动填充符号位
            如果短的值是无符号的，则全部补0
        例： 
            char c = 0x10;
            int a = c;

5、常量
    常量是指在程序运行过程中，不可改变的数据对象
    整型常量
        八进制常量
            0[0-7]*
                以字符0开头后面接0个或多个0-7之间的数字
            例： 
                0777
                0664
            八进制与二进制之间的关系：一个八进制数字表示3个二进制bit位
            0   000
            1   001
            2   010
            3   011
            6   110
            7   111
            最常用于表示文件的权限，如一个文件有三种权限：读、写、执行，如果有这种权限，用1表示，没有这种权限，用0表示
            所以，如果一个文件的权限为可读可写但不可执行，则用8进制表示为 0110 => 6

        十六进制常量
            0[xX][0-9A-Fa-f]+
                以0x或0X开头后面接一个或多个0-9a-fA-F
                十六进制与二进制之间的关系：一个十六进制表示4个二进制bit
                0   0000
                1   0001
                2   0010
                9   1001
                A   1010
                C   1100
                F   1111
        十进制常量 
            [0-9]+

        字符常量
            字符常量是用单引号引起来的一个或多个字符序列
            如： 
            'a'
            'b'
            'x'
            '\n'    表示 换行
            '\t'    表示 制表符，即4个空格
            '\\'    表示 \ 本身
            '\r'    表示 回车
            在计算机中，保存一个字符，保存的是这个字符所对应的数字，称之为 ASCII 码
            以下几个字符的ASCII码需要记一下：
            '0'     48
            'a'     97
            'A'     65
            '\0'    0
            '\n'    10
            例： 
                0   -> '0'      (加48)
                1   -> '1'
                'a' -> 'A'      (减32)
            更多字符的ASCII，请查看文档：
                在linux终端输入指令 man ascii (回车)
            
        练习：
            验证 数字与字符之间的转换，大写与小写字母的转换
            

        浮点数常量
            由整数、小数点、小数部分、字母e/E, 一个可选的带符号的指数和一个可选的表示类型的后缀组成(f/F/L)
            没有后缀，默认就是double类型
            整数部分可省略，小数部分也可省略，但不同时省略
            例： 
                3.14
                3.14F
                314.0E-2
        




    
