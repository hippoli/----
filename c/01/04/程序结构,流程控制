流程控制
    顺序结构
    选择分支
        if
        switch
    循环结构
        goto
        wheil
        do...while
        for

1.if语句
    if语句有三种形式
    1.
        if(表达式){
            语句块
        }
        表达式：进行选择的条件，如果为真则执行
        语句块：由多条语句组成的代码块
    2. 
        if(表达式){
            语句块
        }else{
            语句块
        }
    3.
        if(表达式){
            语句块
        }else if(表达式){
            语句块
        }else{
            语句块
        }
    
    if - else 匹配规则:就近原则

2.switch
    主要用于多选一的情况，用法比if灵活
    格式：
        swith(整型表达式)
        {
            case 常量表达式1：
                语句块
            case 常量表达式2：
                语句块
            default：
                语句块
        }
    说明：
        计算机圆括号中表达式的值，与case后面的常量进行匹配
        匹配成功，执行对应case中的语句块，直到break或switch结束
        如case了没匹配成功，自动执行default语句块

        switch后的表达式必须是整型表达式，如 整数、字符、枚举
        case后的常量表达式必须是一个整数值，且不能是变量，且case后的常量表达式必须不同
        case中的语句块可以省略，即多种情况可用一个代码块
        break用于中止或跳出swith语句

        swith后的括号中只能为常量或者常量表达式
-----------------------------------------------------------------------------------------------------------------------------
goto 语句
    goto告诉计算机去某个地方执行指令
    格式：
        goto 标识符;
    说明：
        goto后面的标识符，用来标识某一行
        这一个标识一般写在一行最开始的位置
    
    例：
        int main(){
            int a = 10;
        //行标识，goto识别到标识，无条件跳转到这一行;
        flag：
            a++;
            goto flag;
        }

while 语句
    格式:
    while(表达式){
        语句块
    }
    说明:
        当表达式的值为真(条件成立)，执行语句块
        执行完后跳回while，继续判断
        表达式不成立，则循环结束
    
    如果在执行循环语句时，需要主动退出循环，可以使用break语句来中止循环
    如果在执行循环语句时，需要重新循环，可以使用contiunue语句来重新循环
    例子:
        while(1){
            if(){
                break;
            }
            else if(){
                contiunue;
            }
        }

do...while 语句
    格式:
        do{
            语句块
        }while (表达式);
    说明:
        先执行一次循环语句，再判断表达式是否成立

for 语句
    格式:
    for (表达式1 ;表达式2 ;表达式3)
    {
        //循环体
    }
    说明:
        先执行一次表达式1
        然后判断表达式2是否成立
            如成立，执行循环体，执行表达式3，再判断表达式2，循环
            不成立，循环结束

        三个表达式都可省略，但分号不能省略;
        break和continue同样适用于for循环
