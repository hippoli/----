运算符
    用来表示运算的符号
    C语言中的运算符一般可分为三类：
        单目运算符，该运算符只需要一个操作数，如++， --， !,  ~
        双目运算符, 该运算符需要两个操作数，如 + - * / %  =  > >= < <=  == !=   &&  ||
        三目运算符, 该运算符需要三个操作数，就一个： ?:

    
    结合性：
        从左到右，从右到左
        如： a + b 先计算a，再计算b， 最后相加
        如： a = b 先计算b, 再赋值给a

    优先级：
        在一个表达中，有多个运算符，则需要考虑优先级的问题
        如乘除法的优先级高于加减法的， 1+2*3
        单目运算符 > 算术运算符 > 关系运算符 > 逻辑运算符 > 条件运算符 > 赋值运算符 > 逗号运算符

        一般优先级不需要专门记忆(能记下来最好), 当有多个运算符时，建议用()来表达优先级
        例： 
            1+2*3 == 7
            (1+2)*3 == 9


    1、算术运算符
        + - * / % ++ --
        算术运算符中的双目运算符 结合性为 从左到右 
        对于 / ，除数不能为0， 
        如 1/0      浮点数异常，程序崩溃
        如 1/0.0    无穷大

        % 的操作数必须是整数

        ++  自增运算符
        --  自减运算符
        例： 
            int i = 1;
            i++;    => i == 2
            int j = 1;
            ++j;    => j == 2

        ++在操作数之前，称为前++， ++在操作数后面，称为后++

        表达式的值与变量的值：
            对某个变量做前++运算，如 ++j， 这个表达式的值与变量的值相同，都是j加1之后的值
            对某个变量做后++运算，如i++, 这个表达式的值与变量的值不相同，表达式的值是变量加1之前的值，而变量的值，是加1之后的值
            不管是前++，还是后++，执行完成后，变量的值都会自增。

        --与++的规则类似。
        例： 
            int i = 1;
            int j;
            j = i++;    // 是把表达式的值赋值给j, 不是把i的值赋值给j
            j == 1
            i == 2

            int i = 1;
            int j;
            j = ++i;    // 是把表达式的值赋值给j，但是表达的值就是i自增之后的值
            j == 2
            i == 2

    练习：
        验证前++后++，前--后--

    扩展：
    int i = 2;
    (++i) + (++i) + (++i) == ? // 这是笔试题
    15

------------------------------------------------------------------------------------------------------------------------------------------
关系运算符
    == != > >= < <=
    双目运算符,从左到右结合
    一般用来判断某个条件是否成立

    如果条件成立,表达式的值为1
    如果条件不成立,表达式的值为0


逻辑运算符  
    &&  (and)   逻辑与,双目运算符,结合从左到右
    ||  (or)    逻辑或,双目运算符,结合从左到右
    !   (not)   逻辑非,单目运算符

    逻辑表达式,用逻辑运算符连接起来的表达式
    它的值只有两种:
        逻辑真,非零
        逻辑假,零

    c99标准中,引入了新类型bool,定义于头文件 stdbool.h 中
    bool ok;
    ok = true;
    ok = false;

    c语言逻辑运算符有"短路"或"惰性"的说法:
    1. a && b && c
        当a为假,后续不判断,表达式为假
    
    2.a || b || c
        当a为真,后续不判断,表达式为真

    逻辑非
        !(非零数) == 0;
        !0 == 1;


位运算
    位运算是按bit位来进行运算,要求操作数都是整数
    位运算符号有如下:
        &   位与
        |   位或
        ^   异或
        ~   位反
        <<  左移
        >>  右移
    除了取反是单目运算符,其他都是双目运算符,结合性从左到右
    所有的位运算都需要把操作数转变成bit序列,然后再按bit位进行运算

    ~ 按位取反
        将1变0,0变1
    
    & 位与
        同1为1,有0为0

    | 位或
        有1为1,同0为0
    
    ^ 异或
        相同为0,不同为1
        两个整数a,b ,使用位运算可以交换它们的值
        int a = 5;
        int b = 6;
        a = a ^ b;      // 101 ^ 110 => 011
        b = a ^ b;      // 011 ^ 110 => 101 = 5
        a = a ^ b;      // 011 ^ 101 => 110 = 6

    << 左移
        按bit位整体左移
        高位左移丢弃,低位补0
        如果左移后丢弃的高位都是0,那么左移n位后,就表示在原值的基础上乘以2的n次方

    >> 右移
        按bit位整体往右移
        高位补bit位,低位丢弃
            对于无符号数直接补0;
            对于有符号数,补符号位(正数为0,负数为1)

    练习:
        假设有一个整型变量a,要求把a的第五位置0,其他bit位不变

        a = a & 1101 1111
        a = a & ~(1<<5)
        //效率更高
        a &= ~(1<<5)

赋值运算符
    双目运算符，从右到左结合                
    赋值运算符要求左边的操作数必须是一个lvalue
    例： 
        1 = 2;  // error 
        a = 1;  // ok 
        i++ = 2;// error 
        a+1 = 10;// error 
        a = b = c = 1; // ok
        (a = b) = c = 1; // error 

        赋值运算符还可以和算术运算符、关系运算符、位运算符组成复合运算符：
        += -=  *= /= %=  >=  <= != == &=  |=  ^=

        例： 
            int a = 1;
            a = a + 1;
            a += 1; // 从结果的角度来说，与上面的表达式一样，但这种写法的效率要高一点。


条件运算符(三目运算符)：
    表达式1 ? 表达式2 : 表达式3
    如果表达式1成立，则整个条件表达式的值为表达式2的结果
    如果表达式1不成立，则整个条件表达式的值为表达式3的结果

    例： 
        int x = 10;
        int y = 20;
        int a = x > 10 ? x : y; // a = 20

        某个文件有很多行，一行有很多字节，要求一行的字节数为4的整数倍，如果不是4的整数倍，则自动在后面填充x个0
        请计算x的值

        int line_bytes = 197;
        int pad_bytes = (line_bytes % 4 == 0) ? 0 : (4 - line_bytes % 4);


逗号运算符
    表达式1,表达式2,...,表达式n
    逗号表达式的求值顺序：
        按从左到右的顺序依次计算表达式1...表达式n
    但整个逗号表达式的值是 表达式n的值 

    例： 
        int a = 1;
        int b = 2;
        int c = 3;
        int d;
        d = a++, b++, c+a;
        d = (a++, b++, c+a);
        d = ?


求字节运算符 sizeof
    单目运算符，用于计算某种类型的值实际占用的存储空间大小，单位为字节
    sizeof(类型名)            
    sizeof(表达式)
    例： 
        sizeof(int) == 4
        sizeof(100) == 4
        sizeof(1000000*2) == 4
        sizeof(3.14) == 8
        sizeof("hello") == 6

    
分量运算符 
    .
    -> 
    用于访问结构体中的成员(字段)       
    例： 
        struct Date
        {
            int y;
            int m;
            int d; 
        };0  

        struct Date today;
        today.y = 2022;
        today.m = 1;
        today.d = 7;

        struct Date * p = &today;
        p->d = 8;

    
下标运算符 []    
    例： 
        int a[5] = {1,2,3,4,5};
        a[0] = 2;
        printf("%d\n", a[4]); // 5

类型转换运算符
    (类型)表达式
    表示把表达式的类型强制转换成圆括号中的类型
    例： 
        (int)3.14
        (double)3



